generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  name           String?
  isAdmin        Boolean          @default(false) @map("is_admin")
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  accounts       Account[]
  journalEntries JournalEntry[]
  pets           Pet[]
  petPhotos      PetPhoto[]
  quickLogs      QuickLog[]
  reminders      Reminder[]
  sessions       Session[]
  connectionsTo  UserConnection[] @relation("ConnectedTo")
  connections    UserConnection[] @relation("UserConnections")

  @@map("users")
}

model Pet {
  id             Int            @id @default(autoincrement())
  name           String
  species        String
  breed          String?
  birthDate      DateTime?      @map("birth_date")
  weight         Float?
  color          String?
  microchipId    String?        @map("microchip_id")
  avatar         String?
  image          String?        // Main profile photo URL
  ownerId        String         @map("owner_id")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  journalEntries JournalEntry[]
  owner          User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  quickLogs      QuickLog[]
  reminders      Reminder[]
  photos         PetPhoto[]

  @@map("pets")
}

model PetPhoto {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  imageUrl    String   @map("image_url")
  isMainPhoto Boolean  @default(false) @map("is_main_photo")
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  petId       Int      @map("pet_id")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pet_photos")
}

model JournalEntry {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  entryType   String   @map("entry_type")
  date        DateTime
  time        String?
  attachments String[]
  tags        String[]
  petId       Int      @map("pet_id")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model QuickLog {
  id        Int      @id @default(autoincrement())
  activity  String
  notes     String?
  timestamp DateTime @default(now())
  petId     Int      @map("pet_id")
  userId    String   @map("user_id")
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quick_logs")
}

model Reminder {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  reminderType     String   @map("reminder_type")
  scheduledAt      DateTime @map("scheduled_at")
  isRecurring      Boolean  @default(false) @map("is_recurring")
  recurringPattern String?  @map("recurring_pattern")
  isCompleted      Boolean  @default(false) @map("is_completed")
  petId            Int      @map("pet_id")
  userId           String   @map("user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  pet              Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model UserConnection {
  id              Int      @id @default(autoincrement())
  userId          String   @map("user_id")
  connectedUserId String   @map("connected_user_id")
  status          String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  connectedUser   User     @relation("ConnectedTo", fields: [connectedUserId], references: [id], onDelete: Cascade)
  user            User     @relation("UserConnections", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, connectedUserId])
  @@map("user_connections")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
